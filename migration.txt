@Grab(group='org.codehaus.groovy.modules.http-builder', module='http-builder', version='0.7.1' )
@Grab(group='org.apache.poi', module='poi', version='4.1.2')
@Grab(group='org.apache.poi', module='poi-ooxml', version='4.1.2')
@Grab(group='org.apache.commons', module='commons-math3', version='3.6.1')
@Grab(group='org.apache.commons', module='commons-collections4', version='4.4')
@Grab(group='javax.jcr', module='jcr', version='2.0')
@Grapes(
    @Grab(group='org.springframework', module='spring-web', version='4.3.0.RELEASE')
)

import groovyx.net.http.HTTPBuilder
import org.apache.poi.ss.usermodel.*
import org.apache.poi.hssf.usermodel.*z
import org.apache.poi.xssf.usermodel.*
import org.apache.poi.ss.util.*
import org.apache.commons.math3.*
import javax.jcr.*
import com.day.cq.search.QueryBuilder.*

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Iterator;
import org.springframework.web.util.HtmlUtils
import java.text.SimpleDateFormat;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.*;
import java.io.FileOutputStream;

import org.apache.commons.lang.StringEscapeUtils


def cli = new CliBuilder()
cli.with
{
   ip(longOpt: 'ip', 'IPaddress', type:String, args:1, required:true)
   u(longOpt: 'username', 'Username', type: String, args: 1, required: true)
   p(longOpt: 'password', 'Password', type: String, args: 1, required: true)
   e(longOpt: 'env', 'Environment', type: String, args: 1, required: true)
   l(longOpt: 'locale', 'Locale', type: String, args: 1, required: true)
   s(longOpt: 'sector', 'Sector', type: String, args: 1, required: true)
   f(longOpt: 'log', 'Log', type: String, args:1,required:true)
}
opt = cli.parse(args)
if (!opt) return
if (opt.h) cli.usage()

http = new HTTPBuilder("http://${opt.ip}")

login()
AEMComponent = "MigrationScript"
queryPath ="/content/" 

def fileDate = new Date().format('yyyyMMdd')
def fileTime = new Date().format('HH.mm.ss')
def fileName = fileDate+"_"+fileTime+"_"+AEMComponent+"_"+"log.txt"
file = new File (fileName)
file.write("MigrationScript")
file << System.getProperty("line.separator")
file.append("IP address: "+opt.ip)
file << System.getProperty("line.separator")
file << System.getProperty("line.separator")

def queryResults
def queryResults2
file.append("Querying for nodes")
file << System.getProperty("line.separator")

def inputFile = new File ("NOT_REPLICATED"+fileName)

// Create file and write to it
inputFile.write("MigrationScript_NOT_REPLICATED" )
inputFile << System.getProperty("line.separator")

//this query will get all locations of nodes
queryResults = getQueryResult()

	queryResult.eachWithIndex() { it, i ->
		def contentPath = it.path
		try{
			def contentNode = get(contentPath+"/jcr:content")
			print "\n[${i+1}/${queryResult.size()}]"
			if (contentNode.'cq:lastReplicationAction' == "Activate"){
				Date replicationDate = new Date(contentNode.'cq:lastReplicated')
				Date modifiedDate = new Date(contentNode.'cq:lastModified')
				TimeDuration dateDifference = TimeCategory.minus(replicationDate, modifiedDate)
				def timeDifference = dateDifference.toMilliseconds()
				if (timeDifference < 0){
					println contentPath
					activatePage(contentPath)
					inputFile << System.getProperty("line.separator")
					inputFile.append(contentPath+';ACTIVATED')
				} else {
					inputFile << System.getProperty("line.separator")
					inputFile.append(contentPath+';NOTHING')
				}
			} else {
				inputFile << System.getProperty("line.separator")
				inputFile.append(contentPath+';NOTHING')
			}
		}catch(all){
			inputFile << System.getProperty("line.separator")
			inputFile.append(contentPath+';ERROR')
		}

}




/////////////
// METHODS //
/////////////


// LOGIN
def login() {
	println "Logging in... "
	http.post(
		path : '/crx/de/j_security_check',
		query : [
			j_username: opt.u,
			j_password: opt.p,
			j_workspace:'crx.default',
			j_validate:'true',
			_charset_:'utf-8'
		]
	)
	{ response ->
		  println "HTTP Status Code: ${response.statusLine.statusCode}"
		  }
	println "LOGIN successful \n"
}

  
def getQueryResult(query,searchType){
//println("inside getQueryResult function") 
 def nodes = []
	println "Querying for ${query}... \n"
	http.get(
		path : '/crx/de/query.jsp',
		query : [
			_charset_:'utf-8',
			type: searchType,
			showResults: true,
			stmt: query
		]
	) { resp, json ->
		json.results.each() {
			nodes << it.path
			println it.path
			
			
		}
	}
	//nodes.sort{it}
	return nodes
  
 }


def getNodesQueryResult(){
def results = []
def queryStatement = 'SELECT * FROM [nt:unstructured] AS comp WHERE ISDESCENDANTNODE(comp,\''+queryPath+'\') AND [sling:resourceType] =\''+'my-project/components/inner'+'\''

//def queryStatement = "SELECT * FROM [nt:unstructured] AS s WHERE ISDESCENDANTNODE([/content/]) AND s.[sling:resourceType] like 'my-project/components/inner'"

getQueryResult(queryStatement,'JCR-SQL2').each(){
it -> results << it
return results
}
}


def getChilNodesResult(childNodesQuery){
def childnodes=[]
def query = childNodesQuery
getQueryResult(query,'JCR-SQL2').each(){
it -> childnodes <<it
return childnodes
}
}

def getPropertiesOfNode(path) {
	// print "Reading ${path} ... "
	 def response = null
	 http.get(
		 path : path + ".1.json"
	 ) { resp, json ->
		 response = json
	 }
	 //println "DONE\n"
	 return response
}



// MODIFY NODE WITH PROPERTIES PROVIDED
def modify(nodePath, properties) {
    print "Modifying ${nodePath} ... "
	file.append("Modifying ${nodePath} ... ")
	
		http.post(
			path : nodePath,
			query : ([ _charset_:'utf-8' ] << properties)
		)
	
	println "DONE"
	file.append("DONE")
}
// ACTIVATE THE PAGES
def activatePage(path) {
    print "Activating ${path}... "
    http.post(
        path : '/bin/replicate.json',
        query : [
            _charset_:'utf-8',
            cmd:'Activate',
            path:path
        ]
    )
    println "DONE"
}